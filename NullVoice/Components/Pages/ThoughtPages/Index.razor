@page "/thoughts"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using NullVoice
@using NullVoice.Data
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IDbContextFactory<NullVoice.Data.NullVoiceContext> DbFactory

<PageTitle>Thoughts</PageTitle>

@foreach (var thought in thoughts)
{
    <span style="display:none;">@thought.Contents</span>
}


<div id="p5-container"></div>

@code {

    private IJSObjectReference? module;
    private DbSet<Models.Thought> thoughts;


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("OnAfterRenderAsync called");

        if (firstRender)
        {

            module = await JS.InvokeAsync<IJSObjectReference>("import",
            "/JS/sketch.js");

            if (module != null)
            {
                await module.InvokeVoidAsync("initializeP5", "p5-container");
            }

        }
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    // Database stuff
    private NullVoiceContext context = default!;
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        thoughts = context.Thought;
    }
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}




